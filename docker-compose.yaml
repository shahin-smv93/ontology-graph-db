services:
  neo4j:
    build:
      context: .
      dockerfile: neo4j.Dockerfile
    container_name: test_neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
      - "7473:7473"
    env_file:
      - .env
    volumes:
      - ./neo4j_data:/data
      - ./neo4j_logs:/logs
      - neo4j_plugins:/var/lib/neo4j/plugins
      - neo4j_conf:/var/lib/neo4j/conf
    environment:
      NEO4J_AUTH: "${NEO4J_AUTH:-neo4j/cerciot}"
      NEO4J_ACCEPT_LICENSE_AGREEMENT: "yes"
      NEO4J_server__config__strict_validation__enabled: "false"
      NEO4J_PLUGINS: '["apoc","n10s"]'
      NEO4J_dbms_memory_heap_max__size: "1G"
      NEO4J_dbms_memory_pagecache_size: "512M"
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,n10s.*,spatial.*,dbms.*"
      NEO4J_dbms_security_procedures_allowlist: "apoc.*,n10s.*,spatial.*,dbms.*"
      NEO4J_dbms_security_procedures_roles: "reader,editor"
      NEO4J_apoc_import_file_enabled: "true"
      NEO4J_apoc_export_file_enabled: "true"
      NEO4J_apoc_import_file_use__neo4j__config: "true"
      NEO4J_dbms_security_auth__minimum__password__length: "6"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - neo4j_network

  neo4j_etl:
    build:
      context: .
      dockerfile: neo4jETL.Dockerfile
    container_name: neo4jETL
    depends_on:
      neo4j:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./neo4j_etl:/app
      - ./sensors_file:/app/sensors_file
    environment:
      NEO4J_URI: "bolt://neo4j:7687"
      NEO4J_AUTH: "${NEO4J_AUTH:-neo4j/cerciot}"
    networks:
      - neo4j_network

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_plugins:
  neo4j_conf:

networks:
  neo4j_network:
    driver: bridge 